1. MinMax

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
void main()
{
    int t = 0, lower = 10, upper = 1000;
    srand(time(0));
    int n, i, a[10], min, max;
    printf("Enter the size of array: \n");
    scanf("%d", &n);

    for (i = 0; i < n; i++)
    {
        a[i] = (rand() % (upper - lower + 1)) + lower;
    }
    printf("The array elements are \n");
    for (i = 0; i < n; i++)
        printf("%d  ", a[i]);

    max = a[0];
    min = a[0];
    for (i = 1; i < n; i++)
    {
        t = t + 1;
        if (a[i] > max)
        {
            max = a[i];
        }
        if (a[i] < min)
        {
            min = a[i];
        }
    }
    printf("\nMax is: %d \n", max);
    printf("Min is: %d \n", min);
    printf("Time complexity is %d \n", t);
}



2.Unique

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
void main()
{
    int t = 0, lower = 10, upper = 1000;
    srand(time(0));
    int n, a[20], ele, i, j, flag = 0;
    printf("Enter the size of the array\n");
    scanf("%d", &n);

    for (i = 0; i < n; i++)
    {
        a[i] = (rand() % (upper - lower + 1)) + lower;
    }

    printf("The array elements are\n");
    for (i = 0; i < n; i++)
        printf("%d  ", a[i]);

    for (i = 0; i < n - 1; i++)
    {
        for (j = i + 1; j < n; j++)
        {
            t = t + 1;
            if (a[i] == a[j])
            {
                printf("\nArray is not unique\n");
                flag = 1;
                break;
            }
        }
    }
    if (flag == 0)
    {
        printf("\nArray is unique \n");
    }
    printf("Time complexity is %d \n", t);
}



3.Matrix Multiplication

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
void main()
{
    int t = 0, lower = 1, upper = 20;
    srand(time(0));
    int n, i, j, k, a[20][20], b[20][20], c[20][20];
    printf("Enter the size of matrix : ");
    scanf("%d", &n);

    printf("Enter Matrix A : \n");
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
        {
            a[i][j] = (rand() % (upper - lower + 1)) + lower;
            printf("%d  ", a[i][j]);
        }
        printf("\n");
    }

    printf("Enter Matrix B : \n");
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
        {
            b[i][j] = (rand() % (upper - lower + 1)) + lower;
            printf("%d  ", b[i][j]);
        }
        printf("\n");
    }

    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
        {
            c[i][j] = 0;
            for (k = 0; k < n; k++)
            {
                t = t + 1;
                c[i][j] = c[i][j] + (a[i][k] * b[k][j]);
            }
        }
    }

    printf("Multiplied matrix is\n");
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
        {
            printf("%d  ", c[i][j]);
        }
        printf("\n");
    }
    printf("Time complexity is %d \n", t);
}



4.Factorial

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
int fact(int n)
{
    if (n == 0)
        return 1;
    else
        return (n * fact(n - 1));
}

void main()
{
    int lower, upper, n, i;
    long int f;
    lower = 1, upper = 12;
    clock_t t;
    double time_taken;

    srand(time(0));

    n = (rand() % (upper - lower + 1)) + lower;
    printf("Entered number is %d \n", n);

    t = clock();
    f = fact(n);
    t = clock() - t;

    time_taken = ((double)t) / CLOCKS_PER_SEC;

    printf("factorial of %d is %ld \n", n, f);
    printf("Time complexity is %f \n", time_taken);
}



5.Tower of Hanoi

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>
int toh(int n, char s, char t, char d)
{
    if (n != 0)
    {
        toh(n - 1, s, d, t);
        printf("Move disk %d from %c to %c \n", n, s, d);
        toh(n - 1, t, s, d);
    }
}

void main()
{
    int lower, upper, n, i;
    lower = 1, upper = 4;
    clock_t t;
    double time_taken;

    srand(time(0));

    n = (rand() % (upper - lower + 1)) + lower;
    printf("Entered disks is %d : \n", n);

    t = clock();
    sleep(10);
    toh(n, 'A', 'B', 'C');
    t = clock() - t;

    time_taken = ((double)t) / CLOCKS_PER_SEC;

    printf("Time complexity is %f \n", time_taken);
}



6.Binary Count

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>
int bin(int n)
{
    if (n == 1)
        return 1;
    else
        return bin(n / 2) + 1;
}
void main()
{
    int lower = 1, upper = 50, n, i, b;
    clock_t t;
    double time_taken;

    srand(time(0));

    n = (rand() % (upper - lower + 1)) + lower;
    printf("Random Generated Number is %d \n", n);

    t = clock();
    sleep(10);
    b = bin(n);
    t = clock() - t;

    time_taken = ((double)t) / CLOCKS_PER_SEC;

    printf("Number of Binary digits in %d is %d \n", n, b);
    printf("Time complexity is %f \n", time_taken);
}


7.Selection Sort

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
void main()
{
    int t, lower = 10, upper = 100;
    long int f;
    srand(time(0));

    int a[20], i, j, k, size, small, temp;
    printf("Enter the size\n");
    scanf("%d", &size);
    printf("Array elements are\n");
    for (i = 0; i < size; i++)
    {
        a[i] = (rand() % (upper - lower + 1)) + lower;
        printf("%d  ", a[i]);
    }

    for (i = 0; i < size - 1; i++)
    {
        small = i;
        for (j = i + 1; j < size; j++)
        {
            t = t + 1;
            if (a[j] < a[small])
            {
                small = j;
            }
        }
        if (small != i)
        {
            temp = a[i];
            a[i] = a[small];
            a[small] = temp;
        }
    }

    printf("\nAfter sorting\n");
    for (i = 0; i < size; i++)
    {
        printf("%d  ", a[i]);
    }

    printf("\nTime complexity is %d \n", t);
}



8.Bubble Sort

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
void main()
{
    // FILE *f=fopen("bubble.dat","a");

    int t = 0, lower = 10, upper = 100;
    srand(time(0));

    int a[20], i, j, k, n, temp, flag = 0;
    printf("Enter the size\n");
    scanf("%d", &n);
    printf("Enter the elements\n");
    for (i = 0; i < n; i++)
    {
        a[i] = (rand() % (upper - lower + 1)) + lower;
        printf("%d  ", a[i]);
    }

    for (i = 0; i < n - 1; i++)
    {
        for (j = 0; j < n - i - 1; j++)
        {
            t = t + 1;
            if (a[j] > a[j + 1])
            {
                temp = a[j];
                a[j] = a[j + 1];
                a[j + 1] = temp;
                flag = 1;
            }
        }
    }
    printf("\nUpdated array\n");
    for (i = 0; i < n; i++)
    {
        printf("%d  ", a[i]);
    }
    printf("\nTime complexity is %d \n", t);
    // fprintf(f,"%d\t%d\n",n,t);
    // fclose(f);
    // system("gnuplot -p -e \"plot './bubble.dat' with linespoints \"");
}



9.String Match

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
void main()
{
    int flag = 0, n, m, i, j, time = 0;
    char s[30], p[30];
    // char s[20]="Nobody Noticed Him";
    // char p[20]="Not";

    printf("Enter the string : ");
    scanf("%s", s);

    printf("Enter the pattern : ");
    scanf("%s", p);

    n = strlen(s);
    m = strlen(p);

    for (i = 0; i < n - m; i++)
    {
        j = 0;
        time = time + 1;
        while (j < m && s[i + j] == p[j])
        {
            j++;
        }
        if (j == m)
        {
            flag = 1;
            printf("Pattern matched at position %d \n", i);
        }
    }

    if (flag == 0)
        printf("Pattern not found \n");

    printf("Time complexity is %d \n", time);
}



10. Binary Search with Selection Sort


#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>
int binary(int a[], int l, int r, int ele)
{
    if (l <= r)
    {
        int m = (l + r) / 2;
        int flag = 0;
        if (a[m] == ele)
        {
            return m;
            flag = 1;
        }
        else if (a[m] < ele)
            return binary(a, m + 1, r, ele);
        else
            return binary(a, l, m - 1, ele);
        return 1;
    }
}

void main()
{
    int flag = 0, lower = 10, upper = 200, res = 0, ele, n, a[20], i, j, temp, small;
    clock_t t;
    double time_taken;
    srand(time(0));

    printf("Enter the size\n");
    scanf("%d", &n);

    printf("Random Generated numbers are \n");
    for (i = 0; i < n; i++)
    {
        a[i] = (rand() % (upper - lower + 1)) + lower;
        printf("%d  ", a[i]);
    }

    // Selection Sort
    for (i = 0; i < n - 1; i++)
    {
        small = i;
        for (j = i + 1; j < n; j++)
        {
            if (a[j] < a[small])
            {
                small = j;
            }
        }
        if (small != i)
        {
            temp = a[i];
            a[i] = a[small];
            a[small] = temp;
        }
    }

    printf("\nAfter sorting\n");
    for (i = 0; i < n; i++)
    {
        printf("%d  ", a[i]);
    }

    printf("\nEnter the element to be found\n");
    scanf("%d", &ele);

    t = clock();
    sleep(10);
    res = binary(a, 0, n - 1, ele);
    t = clock() - t;

    time_taken = ((double)t) / CLOCKS_PER_SEC;

    if (flag == 0)
        printf("Element found at %d \n", res);
    else
        printf("Element not found \n");

    printf("Time complexity is %f \n", time_taken);
}



11.Merge Sort

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>

void merge(int a[], int l, int m, int r);
void mergesort(int a[], int l, int r)
{
    if (l < r)
    {
        int m = (l + r) / 2;
        mergesort(a, l, m);
        mergesort(a, m + 1, r);
        merge(a, l, m, r);
    }
}

void merge(int a[], int l, int m, int r)
{
    int fp = l, sp = m + 1, k = l, b[1000000], j;
    while ((fp <= m) && (sp <= r))
    {
        if (a[fp] < a[sp])
        {
            b[k] = a[fp];
            fp++;
            k++;
        }
        else
        {
            b[k] = a[sp];
            sp++;
            k++;
        }
    }
    if (fp > m)
    {
        for (j = sp; j <= r; j++)
        {
            b[k] = a[j];
            k++;
        }
    }
    if (sp > r)
    {
        for (j = fp; j <= m; j++)
        {
            b[k] = a[j];
            k++;
        }
    }
    for (j = l; j <= r; j++)
    {
        a[j] = b[j];
    }
}

int main()
{
    int i, res, n, a[100], lower = 10, upper = 100;
    clock_t t;
    double time_taken;
    srand(time(0));

    printf("Enter the size of the array \n");
    scanf("%d", &n);

    printf("Random generated numbers are \n");
    for (i = 0; i < n; i++)
    {
        a[i] = (rand() % (upper - lower + 1)) + lower;
        printf("%d  ", a[i]);
    }

    t = clock();
    //      sleep(10);
    mergesort(a, 0, n - 1);
    t = clock() - t;

    printf("\nSorted array is \n");
    for (i = 0; i < n; i++)
    {
        printf("%d  ", a[i]);
    }

    time_taken = ((double)t) / CLOCKS_PER_SEC;

    printf("\nTime Complexity is %f \n", time_taken);
}


12.Quick Sort

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
int part(int a[], int l, int r);
void quicksort(int a[], int l, int r)
{
    if (l < r)
    {
        int s = part(a, l, r);
        quicksort(a, l, s - 1);
        quicksort(a, s + 1, r);
    }
}
int part(int a[], int l, int r)
{
    int i = l - 1;
    int j = r + 1;
    int pivot = a[l];
    while (1)
    {
        do
        {
            i++;
        } while (pivot >= a[i]);

        do
        {
            j--;
        } while (pivot < a[j]);

        if (i < j)
        {
            int temp = a[i];
            a[i] = a[j];
            a[j] = temp;
        }
        
        if (i > j)
        {
            int tmp = a[l];
            a[l] = a[j];
            a[j] = tmp;
            return j;
        }
    }
}
int main()
{
    int n, a[100000], k, lower = 0, upper = 100;
    clock_t t;
    double time_taken;
    srand(time(0));

    printf("Enter the size of the array\n");
    scanf("%d", &n);

    printf("Random Generated numbers are\n");
    for (k = 0; k < n; k++)
    {
        a[k] = (rand() % (upper - lower + 1)) + lower;
        printf("%d  ", a[k]);
    }

    t = clock();
    quicksort(a, 0, n - 1);
    t = clock() - t;

    time_taken = ((double)t) / CLOCKS_PER_SEC;

    printf("\nAfter sorting\n");
    for (k = 0; k < n; k++)
    {
        printf("%d  ", a[k]);
    }

    printf("\nTime Complexity is %f\n", time_taken);
    return 0;
}


13.Insertion Sort

#include <stdio.h>
#include <stdlib.h>
void main()
{
    int e, i, a[10000], n, lower = 10, upper = 100, j, t;

    printf("Enter the size of the array \n");
    scanf("%d", &n);

    printf("Random Generated elements are \n");
    for (i = 0; i < n; i++)
    {
        a[i] = (rand() % (upper - lower + 1)) + lower;
        printf("%d  ", a[i]);
    }

    for (i = 1; i < n; i++)
    {
        e = a[i];
        j = i - 1;
        while (j >= 0 && a[j] > e)
        {
            //t = t + 1;
            a[j + 1] = a[j];
            j--;
        }
        a[j + 1] = e;
    }

    printf("\nAfter sorting \n");
    for (i = 0; i < n; i++)
    {
        printf("%d  ", a[i]);
    }
    printf("\nTime complexity is %d \n", t);
}



14. DFS

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
void DFS(int adj[][100], int i, int n)
{
    int j, s[1000], top = -1, k, flag = 0, visited[100];

    for (k = 0; k < n; k++)
        visited[k] = 0;

    s[++top] = i;
    visited[i] = 1;
    printf("DFS vertices are %d  ", i);
    while (1)
    {
        j = 1;
        while (j <= n)
        {
            flag = 0;
            if (adj[i][j] == 1)
            {
                if (visited[j] == 0)
                {
                    visited[j] = 1;
                    s[++top] = j;
                    printf("%d  ", j);
                    i = j;
                    flag = 1;
                    j = 1;
                }
            }
            if (flag == 0)
                j++;
        }
        if (top == -1)
            break;
        else
            i = s[--top];
    }
}

int main()
{
    int i, j, n, adj[100][100];
    clock_t t;
    double time_taken;

    printf("Enter the number of vertices \n");
    scanf("%d", &n);

    printf("Enter Adjacency matrix \n");
    for (i = 1; i <= n; i++)
    {
        for (j = 1; j <= n; j++)
        {
            scanf("%d", &adj[i][j]);
        }
    }
    i = 1;
    t = clock();
    DFS(adj, i, n);
    t = clock() - t;

    time_taken = ((double)t) / CLOCKS_PER_SEC;
    printf("\n");
    printf("Time complexity is %f \n", time_taken);
    return 0;
}




15.BFS


#include <stdio.h>
#include <stdlib.h>
#include <time.h>
void BFS(int adj[][100], int i, int n)
{
    int j, q[1000], f = -1, r = -1, k, flag = 0, visited[100];

    for (k = 0; k < n; k++)
        visited[k] = 0;

    q[++r] = i;
    visited[i] = 1;
    printf("BFS vertices are %d  ", i);
    while (1)
    {
        for (j = 0; j <= n; j++)
        {
            if (adj[i][j] == 1)
            {
                if (visited[j] == 0)
                {
                    visited[j] = 1;
                    q[++r] = j;
                    if (f == -1)
                        f = f + 1;
                    printf("%d  ", j);
                }
            }
        }
        if ((f == -1) || (f > r))
            break;
        else
            i = q[f++];
    }
}

int main()
{
    int i, j, n, adj[100][100];
    clock_t t;
    double time_taken;

    printf("Enter the number of vertices \n");
    scanf("%d", &n);

    printf("Enter Adjacency matrix \n");
    for (i = 1; i <= n; i++)
    {
        for (j = 1; j <= n; j++)
        {
            scanf("%d", &adj[i][j]);
        }
    }
    i = 1;
    t = clock();
    BFS(adj, i, n);
    t = clock() - t;

    time_taken = ((double)t) / CLOCKS_PER_SEC;
    printf("\nTime complexity is %f \n", time_taken);
    return 0;
}



16.HeapSort

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
int hs;

void BuildHeap(int a[], int n);
void Heapify(int a[], int i);
void HeapSort(int a[], int n)
{
    int i, temp;
    BuildHeap(a, n);
    for (i = n; i >= 2; i--)
    {
        temp = a[i];
        a[i] = a[1];
        a[1] = temp;
        hs = hs - 1;
        Heapify(a, 1);
    }
}

void BuildHeap(int a[], int n)
{
    int i;
    for (i = n / 2; i >= 1; i--)
    {
        Heapify(a, i);
    }
}

void Heapify(int a[], int i)
{
    int l, r, large, tem;
    l = 2 * i;
    r = (2 * i) + 1;
    while (1)
    {
        if ((l <= hs) && (a[l] > a[i]))
            large = l;
        else
            large = i;
        if ((r <= hs) && (a[r] > a[large]))
            large = r;
        if (i != large)
        {
            tem = a[i];
            a[i] = a[large];
            a[large] = tem;
            Heapify(a, large);
        }
        else
            return;
    }
}

int main()
{
    int i, j, n, a[1000], lower = 10, upper = 100;
    srand(time(0));
    clock_t t;
    double time_taken;

    printf("Enter the size of the array \n");
    scanf("%d", &n);

    hs = n;

    printf("Random generated numbers are \n");
    for (i = 1; i <= n; i++)
    {
        a[i] = (rand() % (upper - lower + 1)) + lower;
        printf("%d  ", a[i]);
        //scanf("%d",&a[i]);
    }

    t = clock();
    HeapSort(a, n);
    t = clock() - t;

    printf("\nSorted array is \n");
    for (i = 1; i <= n; i++)
    {
        printf("%d  ", a[i]);
    }

    time_taken = ((double)t) / CLOCKS_PER_SEC;
    printf("\n");
    printf("Time complexity is %f \n", time_taken);
    return 0;
}



17. Horsepool


#include<stdio.h>
#include<stdlib.h>
#include<string.h>

void ShiftTable(char p[],int t[])
{
        int m,i,j;
        m=strlen(p);
        for(i=0;i<256;i++)
                t[i]=m;
        for(j=0;j<m-1;j++)
                t[p[j]]=m-1-j;
}

int Horsepool(char s[],char p[],int t[])
{
        int i,n,m,k;
        n=strlen(s);
        m=strlen(p);
        i=m-1;
        printf("%d ",i);
        while(i<n)
        {
                k=0;
                while((k<m) && (p[m-1-k]==s[i-k]))
                        k++;
                if(k==m)
                        return i-m+1;
                else
                {
                        i=i+t[s[i]];
                        printf("%d  ",i);
                }
        }
        return -1;
}


int main()
{
        char t[2000],p[2000];
        int s[256],found;

        printf("Enter source string\n");
        scanf("%s",t);

        printf("Enter pattern string\n");
        scanf("%s",p);

        ShiftTable(p,s);
        found=Horsepool(t,p,s);

        if(found==-1)
                printf("\nPattern not found \n");
        else
                printf("\nPattern found at %d \n",found);
        return 0;
}



18.Binomial Co-efficient

#include <stdio.h>

int min(int i, int k)
{
    if (i > k)
        return k;
    else
        return i;
}

int Binomial(int n, int k)
{
    int c[n + 1][k + 1];
    int i, j;

    for (i = 0; i < n; i++)
    {
        for (j = 0; j <= min(i, k); j++)
        {
            if (j == 0 || j == i)
                c[i][j] = 1;
            else
                c[i][j] = c[i - 1][j - 1] + c[i - 1][j];
        }
    }
    return c[n - 1][k - 1] + c[n - 1][k];
}

void main()
{
    int n, k;

    printf("Enter the value of n \n");
    scanf("%d", &n);

    printf("Enter the value of k \n");
    scanf("%d", &k);

    int bc = Binomial(n, k);

    printf("The Binomial Co-Efficient is %d", bc);
}



19.Warshall

#include <stdio.h>
#include <stdlib.h>

void Warshalls(int a[100][100], int n)
{
    int i, j, k;
    for (k = 1; k <= n; k++)
    {
        for (i = 1; i <= n; i++)
        {
            for (j = 1; j <= n; j++)
            {
                if (i != k && j != k)
                    a[i][j] = a[i][j] || (a[i][k] && a[k][j]);
            }
        }
    }
}

void main()
{
    int i, j, n, a[100][100];

    printf("Enter the size of the Matrix \n");
    scanf("%d", &n);

    printf("Enter the adjacency matrix \n");
    for (i = 1; i <= n; i++)
    {
        for (j = 1; j <= n; j++)
        {
            scanf("%d", &a[i][j]);
        }
    }

    Warshalls(a, n);

    printf("Transitive Clouser matrix \n");
    for (i = 1; i <= n; i++)
    {
        for (j = 1; j <= n; j++)
        {
            printf("%d ", a[i][j]);
        }
        printf("\n");
    }
}



20.Floyds


#include <stdio.h>
#include <stdlib.h>

void Floyds(int a[100][100], int n)
{
    int i, j, k;
    for (k = 1; k <= n; k++)
    {
        for (i = 1; i <= n; i++)
        {
            for (j = 1; j <= n; j++)
            {
                if (i != k && j != k && i != j)
                {
                    if(a[i][j]>a[i][k]+a[k][j])
                    {
                        a[i][j] = a[i][k]+a[k][j];
                    }
                }
            }
        }
    }
}

void main()
{
    int i, j, n, a[100][100];

    printf("Enter the size of the Matrix \n");
    scanf("%d", &n);

    printf("Enter the adjacency matrix \n");
    for (i = 1; i <= n; i++)
    {
        for (j = 1; j <= n; j++)
        {
            scanf("%d", &a[i][j]);
        }
    }

    Floyds(a, n);

    printf("Distance matrix \n");
    for (i = 1; i <= n; i++)
    {
        for (j = 1; j <= n; j++)
        {
            printf("%d ", a[i][j]);
        }
        printf("\n");
    }
}



21.Knapsack


#include <stdio.h>
#include <stdlib.h>

int max(int a, int b)
{
    return (a > b)? a : b;
}
int Knapsack(int m,int w[],int p[],int n)
{
    int i,j;
    int k[n+1][m+1];
    for (i = 0; i <= n; i++)
    {
        for(j=0;j<=m;j++)
        {
            if(i==0 || j==0)
                k[i][j] = 0;
            else if (w[i-1]<=j)
                k[i][j]=max(p[i-1]+k[i-1][j-w[i-1]], k[i-1][j]);
            else
                k[i][j]=k[i-1][j];
        }
    }
    printf("Knapsack Matrix is : \n");
    for(i=0;i<=n;i++)
    {
        for(j=0;j<=m;j++)
        {
            printf("%d  ",k[i][j]);
        }
        printf("\n");
    }
        return k[n][m];
}

int main()
{
    // int m=5;
    // int n=4;
    // int w[]={2,1,3,2};
    // int v[]={12,10,20,15};
    int i,m,n,w[50],v[50];

    printf("Enter the Maximum Capacity\n");
    scanf("%d",&m);
    printf("Enter the number of items\n");
    scanf("%d",&n);

    printf("Enter the weights of each items\n");
    for(i=0;i<n;i++)
    {
        scanf("%d",&w[i]);
    }
    printf("Enter the values of each items\n");
    for(i=0;i<n;i++)
    {
        scanf("%d",&v[i]);
    }

    int res = Knapsack(m,w,v,n);

    printf("The Maximum value is %d \n",res);
    return 0;
}



22.NQueens

#include<stdio.h>
#include<stdlib.h>
#include<math.h>
//N Queens Program
int board[20],count=0;
int place(int row,int col)
{
    int i;
    for(i=1;i<=row-1;i++)
    {
        if(board[i]==col)
            return 0;
        else if (abs(board[i] -col)==abs(i-row))
            return 0;
    }
    return 1;
}
void print(int n)
{
    int i,j;
    printf("\n\nSolution %d \n",++count);
    for(i=1;i<=n;i++)
    {
        printf("\t%d",i);
    }
    for(i=1;i<=n;i++)
    {
        printf("\n\n%d",i);
        for(j=1;j<=n;j++)
        {
            if(board[i]==j)
                printf("\tQ");
            else
                printf("\t-");
        }
    }
}
void queen(int row, int n)
{
    int col;
    for(col=1;col<=n;col++)
    {
        if(place(row,col))
        {
            board[row]=col;
            if(row>=n)
                print(n);
            else
                queen(row+1,n);
        }
    }
}
int main()
{
    int n,i,j;
    printf("Enter the size of the chessboard: ");
    scanf("%d",&n);
    queen(1,n);
    return 0;
}


//Assignment
Comparision Counting

#include<stdio.h>
void main()
{
    int n,a[10],i,j,b[10];
    printf("Enter the size of the array: \n");
    scanf("%d", &n);
    printf("Enter the array elements: \n");
    for(i=0; i<n; i++)
    {
        scanf("%d", &a[i]);
        b[i] = -1;
    }
    
    for(i=0; i<n; i++)
    {
        int count=0;
        for(j=0; j<n; j++)
        {
            if(a[j] < a[i])
            {
                count++;
            }
        }
        while (b[count]!=-1)
        {
            count++;
        }
        b[count] = a[i];
    }
    
    printf("Sorted array: ");
    for(i=0; i<n; i++)
    {
        printf("%d ", b[i]);
    } 
}


Distribution Counting

#include<stdio.h>
void main()
{
    int n,a[10],i,j,index=0,max=0;
    printf("Enter the size of the array: \n");
    scanf("%d", &n);
    printf("Enter the array elements: \n");
    for(i=0; i<n; i++)
    {
        scanf("%d", &a[i]);
    }

    max = a[0];
    for (i = 1; i < n; i++) 
    {
        if (a[i] > max) 
        {
            max = a[i];
        }
    }

    int count[max + 1];
    for (i = 0; i <= max; i++) 
    {
        count[i] = 0;
    }

    for (i = 0; i < n; i++)
    {
        count[a[i]]++;
    }

    for(i = 0; i <= max; i++)
    {
        while(count[i]>0)
        {
            a[index++] = i;
            count[i]--;
        }
    }
    
    printf("Sorted array: ");
    for(i=0; i<n; i++)
    {
        printf("%d ", a[i]);
    } 
}